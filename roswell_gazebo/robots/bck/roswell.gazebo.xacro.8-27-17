<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="roswell" >
  <xacro:include filename="$(find roswell_defs)/urdf/roswell.urdf" />

<!--
 <include>
      <uri>model://roswell</uri>
 </include>
-->

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/roswell</robotNamespace>
    </plugin>
  </gazebo>

  <!-- Base is modeled as a big tub sitting on floor, with two wheels -->
  <gazebo reference="base_link">
    <kp>100000000.0</kp>
    <kd>10.0</kd>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>10.0</maxVel>
    <minDepth>0.0005</minDepth>
  </gazebo>

  <gazebo reference="rear_caster_link">
    <!-- starting from tb3: -->
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.0</maxVel>
  </gazebo>

  <gazebo reference="rear_wheel_link">
    <!-- starting from tb3: -->
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
<!--
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
-->
    <maxVel>0.0</maxVel>
    <minDepth>0.01</minDepth>
    <collision name="colis_rear">
      <surface>
            <friction>
              <ode>
                <mu>0</mu>
                <mu2>0</mu2>
              </ode>
              <torsional>
                <coefficient>0.0</coefficient>
                <patch_radius>0.00</patch_radius>
              </torsional>
            </friction>
            <contact>
              <ode>
                <kp>500000</kp>
              </ode>
            </contact>
      </surface>
    </collision>

    <!-- Fetch:
    <kp>500000.0</kp>
    <kd>10.0</kd>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.003</minDepth>
    -->
  </gazebo>
  <gazebo reference="base_r_wheel_link">
    <mu1>10</mu1>
    <mu2>10</mu2>
    <!-- based on Turtlebot3 -->
    <kp>500000.0</kp>
    <kd>10.0</kd>
<!--
    <maxVel>0.0</maxVel>
    <minDepth>0.003</minDepth>
-->
    <gravity>true</gravity>
    <maxVel>1.0</maxVel>
    <minDepth>0.003</minDepth>
    <fdir1>1 0 0</fdir1>

    <material>Gazebo/Orange</material>

    <!-- ARD: USED BY GAZEBO -->
    <!-- fetch values: 
    <fdir1>1 0 0</fdir1>
    <minDepth>0.003</minDepth>
    <maxVel>0.0</maxVel>
    -->
    <!-- note: kp, kd, mu1, mu2 all interact in strange ways.  -->
    <collision name="colis1">
      <surface>
            <friction>
              <ode>
                <mu>10</mu>
                <mu2>10</mu2>
              </ode>
              <torsional>
                <coefficient>1.0</coefficient>
                <patch_radius>1.01</patch_radius>
              </torsional>
            </friction>
            <contact>
              <ode>
                <kp>500000</kp>
              </ode>
            </contact>
      </surface>
    </collision>
<!--
-->
  </gazebo>
  <gazebo reference="base_l_wheel_link">
    <mu1>10</mu1>
    <mu2>10</mu2>
    <!-- based on Turtlebot3 -->
    <kp>500000.0</kp>
    <kd>10.0</kd>
<!--
    <minDepth>0.003</minDepth>
    <maxVel>0.0</maxVel>
-->
    <gravity>true</gravity>
    <maxVel>1.0</maxVel>
    <minDepth>0.003</minDepth>
    <fdir1>1 0 0</fdir1>

    <material>Gazebo/Orange</material>
    <collision name="colis2">
      <surface>
            <friction>
              <ode>
                <mu>10</mu>
                <mu2>10</mu2>
              </ode>
              <torsional>
                <coefficient>1.0</coefficient>
                <patch_radius>1.01</patch_radius>
              </torsional>
            </friction>
            <contact>
              <ode>
                <kp>500000</kp>
              </ode>
            </contact>
      </surface>
    </collision>
<!--
-->

    <!-- from Fetch: 
        <mu1>10</mu1>
        <mu2>10</mu2>
        <kp>500000.0</kp>
        <kd>10.0</kd>
        <maxVel>1.0</maxVel>
        <minDepth>0.003</minDepth>
        <fdir1>1 0 0</fdir1>
    -->
  </gazebo>
  <gazebo reference="rear_wheel_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="base_l_wheel_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="base_r_wheel_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="arm_wrist_roll_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>

  <!-- Gripper is another fallacy of physics -->
  <gazebo reference="r_gripper_link">
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>30.0</mu1>
    <mu2>30.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="l_gripper_link">
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>30.0</mu1>
    <mu2>30.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- SICK TIM561 (25m Range) -->
<!--
  <gazebo reference="base_laser_link">
    <sensor type="ray" name="base_laser">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>15</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>661</samples>
            <resolution>1</resolution>
            <min_angle>-1.91986</min_angle>
            <max_angle>1.91986</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.05</min>
          <max>25.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <!- Noise parameters based on spec for SICK TIM561 (10m version) ->
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_base_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/base_scan</topicName>
        <frameName>base_laser_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
-->
<!--
  <gazebo reference="base_scan">
    <sensor type="ray" name="lds_lfcd_sensor">
-->

<!--
-->
  <arg name="laser_visual"  default="false"/>
  <gazebo reference="base_laser_link">
    <material>Gazebo/DarkGrey</material>
    <sensor type="ray" name="base_laser">
      <pose>0 0 0 0 0 0</pose>
      <visualize>$(arg laser_visual)</visualize>
      <update_rate>1800</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-1.91986</min_angle>
            <max_angle>1.91986</max_angle>
<!--
            <min_angle>0.0</min_angle>
            <max_angle>6.28</max_angle>
-->
          </horizontal>
        </scan>
        <range>
          <min>0.120</min>
          <max>3.5</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_laser.so">
        <topicName>/base_scan</topicName>
        <frameName>base_laser_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
<!--
-->


  <!-- Primesense Carmine 1.09 -->
<!--
  <gazebo reference="head_camera_rgb_optical_frame">
-->
  <gazebo reference="head_camera_rgb_frame">
    <sensor type="depth" name="camera">
      <always_on>true</always_on>
      <update_rate>15.0</update_rate>
      <camera>
        <horizontal_fov>1.047197</horizontal_fov>
        <image>
          <!-- openni_kinect plugin works only with BGR8 -->
          <format>B8G8R8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>50</far>
        </clip>
      </camera>
      <plugin name="head_camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.1</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>15.0</updateRate>
        <cameraName>head_camera</cameraName>
        <imageTopicName>/head_camera/rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>/head_camera/rgb/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/head_camera/depth_registered/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/head_camera/depth_registered/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/head_camera/depth_registered/points</pointCloudTopicName>
        <frameName>head_camera_rgb_optical_frame</frameName>
        <pointCloudCutoff>0.35</pointCloudCutoff>
        <pointCloudCutoffMax>4.5</pointCloudCutoffMax>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Color the bellows -->
<!--
  <gazebo reference="bellows_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="bellows_link2">
    <material>Gazebo/Black</material>
  </gazebo>
-->

  <!-- Color the estop -->
<!--
  <gazebo reference="estop_link">
    <material>Gazebo/Red</material>
  </gazebo>
-->

  <!-- Load the plugin -->
  <gazebo>
    <plugin name="roswell_tb3_controller" filename="libgazebo_ros_diff_drive.so">
      <robotNamespace>/roswell</robotNamespace>
      <!-- to make relative use "cmd_vel" and "odom" instead -->
      <commandTopic>/cmd_vel</commandTopic>
      <odometryTopic>/odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <updateRate>100</updateRate>
      <leftJoint>base_l_wheel_joint</leftJoint>
      <rightJoint>base_r_wheel_joint</rightJoint>
      <!-- wheel: <cylinder length="1.02032" radius="0.06191"/> 
           track_width: 0.38608
      -->
      <wheelSeparation>0.38608</wheelSeparation>
      <wheelDiameter>0.12382</wheelDiameter>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>10</wheelTorque>
    </plugin>
  </gazebo>
  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find roswell_gazebo)/config/position_controller.yaml" command="load"/>

  <!-- load the position controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
  output="screen" ns="/roswell_arm_chain" args="joint_state_controller
                                      arm_shoulder_lift_joint_position
                                      arm_upperarm_roll_joint_position
                                      arm_elbow_flex_joint_position
                                      arm_wrist_flex_joint_position
                                      arm_wrist_roll_joint_position
                                      l_gripper_joint_position
                                      r_gripper_joint_position
                                      head_pan_joint_position
                                      head_tilt_joint_position"/>


<!-- Now based on turtlebot3
-->
  <gazebo>
    <plugin name="roswell_gazebo_plugin" filename="libroswell_gazebo_plugin.so"/>
  </gazebo>

  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
<!--
      <bodyName>imu_link</bodyName>
-->
      <bodyName>base_laser_link</bodyName>
      <frameName>base_laser_link</frameName>
      <topicName>/imu</topicName>
      <serviceName>/imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>100.0</updateRate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </plugin>
  </gazebo>

</robot>
