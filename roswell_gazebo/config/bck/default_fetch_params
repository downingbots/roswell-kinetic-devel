  nh.param<std::string>("l_wheel_joint", l_name, "l_wheel_joint");
  nh.param<std::string>("r_wheel_joint", r_name, "r_wheel_joint");
  // Get base parameters
  nh.param<double>("track_width", track_width_, 0.37476);
  nh.param<double>("radians_per_meter", radians_per_meter_, 16.5289);
  nh.param<bool>("publish_tf", publish_tf_, true);
  nh.param<std::string>("odometry_frame", odom_.header.frame_id, "odom");
  nh.param<std::string>("base_frame", odom_.child_frame_id, "base_link");
  nh.param<double>("wheel_rotating_threshold", wheel_rotating_threshold_, 0.001);
  nh.param<double>("rotating_threshold", rotating_threshold_, 0.05);
  nh.param<double>("moving_threshold", moving_threshold_, 0.05);
  nh.param<double>("timeout", t, 0.25);
  nh.param<double>("max_velocity_x", max_velocity_x_, 1.0);
  nh.param<double>("max_velocity_r", max_velocity_r_, 4.5);
  nh.param<double>("max_acceleration_x", max_acceleration_x_, 0.75);
  nh.param<double>("max_acceleration_r", max_acceleration_r_, 3.0);
  nh.param<double>("publish_frequency", publish_frequency, 100.0);
  nh.param<double>("laser_safety_dist", safety_scaling_distance_, 0.0);
  nh.param<double>("robot_safety_width", robot_width_, 0.7);
  nh.param("autostart", autostart, false);
