#!/usr/bin/env python

# Copyright (c) 2015, Fetch Robotics Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Fetch Robotics Inc. nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL FETCH ROBOTICS INC. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Author: Michael Ferguson

import copy
import actionlib
import rospy
import actionlib_msgs.msg as am
import tf

from tf.transformations import euler_from_quaternion
from math import sin, cos, atan2
from moveit_python import (MoveGroupInterface,
                           PlanningSceneInterface,
                           PickPlaceInterface)
from moveit_python.geometry import rotate_pose_msg_by_euler_angles

from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from control_msgs.msg import PointHeadAction, PointHeadGoal
from grasping_msgs.msg import FindGraspableObjectsAction, FindGraspableObjectsGoal, FindTablesAction, FindTablesGoal
from geometry_msgs.msg import PoseStamped
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from moveit_msgs.msg import PlaceLocation, MoveItErrorCodes
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from nav_msgs.msg import Odometry


# We always import roslib, and load the manifest to handle dependencies
# import roslib; roslib.load_manifest('mini_max_tutorials')

# recall: robots generally take base movement commands on a topic 
#  called "cmd_vel" using a message type "geometry_msgs/Twist"
from geometry_msgs.msg import Twist

class twist_moves:
    """ This example is in the form of a class. """

    def __init__(self):
        """ This is the constructor of our class. """
        # register this function to be called on shutdown
        rospy.on_shutdown(self.stop_twist)

        # publish to cmd_vel
        # self.pub = rospy.Publisher('/teleop/cmd_vel', Twist, queue_size=10)
        self.pub = rospy.Publisher('/base_controller/command', Twist, queue_size=10)
        # give our node/publisher a bit of time to connect
        rospy.loginfo("twist_moves: sleep(1)...")
        rospy.sleep(1)

        # use a rate to make sure the bot keeps moving
        r = rospy.Rate(5.0)

        # go forever!
        # self.square_forever()
        # self.rotate_forever()
        # self.rotate_once()
        # self.rotate_once()
        # self.hall_forever()

    def square_forever(self):
        r = rospy.Rate(5.0)
        while not rospy.is_shutdown():
          for s in range(4):         # 10*5hz = 2sec
            # create a Twist message, fill it in to drive forward
            rospy.loginfo("twist_moves: drive fwd...")
            twist = Twist()
            twist.linear.x = 0.15
            for i in range(10):         # 10*5hz = 2sec
                self.pub.publish(twist)
                r.sleep()
            # create a twist message, fill it in to turn
            rospy.loginfo("twist_moves: twist...")
            twist = Twist()
            twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
            for i in range(5 * 8):
                self.pub.publish(twist)
                r.sleep()
            # self.stop_twist()

    def rotate_once(self):
        r = rospy.Rate(5.0)
        rospy.loginfo("rotate once to start localization...")
        twist = Twist()
        twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
        # 4 times * 5 hz * 8 sec * (90 deg / 8)
        maxtab = 0
        for i in range(4 * 5 * 18):
          self.pub.publish(twist)
          r.sleep()
          if i%10 == 0 or maxtab > 0:
            grasping_client.lookForTable()
            if maxtab < self.table:
              maxtab = self.table
            elif maxtab > self.table:
              stop_twist()
              break
            # cube, grasps = grasping_client.getTable()
        # self.stop_twist()

    def nav_to_table_no_slam(self):
        r = rospy.Rate(5.0)
        rospy.loginfo("drive directly to table...")
        twist = Twist()
        twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
        maxtab = 0
        for i in range(20 * 3):
          self.pub.publish(twist)
          r.sleep()
          if i%10 == 0 or maxtab > 0:
            grasping_client.lookForTable()
            if maxtab < self.table:
              maxtab = self.table
            elif maxtab > self.table:
              stop_twist()
              break
        # self.stop_twist()
        rospy.loginfo("twist_moves: drive fwd...")
        twist = Twist()
        twist.linear.x = 0.15
        for i in range(10*12):         # 10*5hz = 2sec
           self.pub.publish(twist)
           r.sleep()
           if i%10 == 0:
             grasping_client.lookForTable()
             # cube, grasps = grasping_client.getTable()
        # self.stop_twist()


    def rotate_forever(self):
        r = rospy.Rate(5.0)
        rospy.loginfo("rotate forever...")
        twist = Twist()
        twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
        while not rospy.is_shutdown():
          self.pub.publish(twist)
          r.sleep()
        # self.stop_twist()

    def hall_forever(self):
        rospy.loginfo("hall forever...")
        r = rospy.Rate(5.0)
        while not rospy.is_shutdown():
          twist = Twist()
          twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
          rospy.loginfo("twist_moves: turn 180 degrees...")
          for i in range(10 * 8):      
            self.pub.publish(twist)
            r.sleep()
          # self.stop_twist()
          rospy.loginfo("twist_moves: drive fwd...")
          twist = Twist()
          twist.linear.x = .15
          twist.angular.z = 0
          for i in range(80):         
            self.pub.publish(twist)
            r.sleep()
        # stop the robot!
        twist = Twist()
        self.pub.publish(twist)

    def stop_twist(self):
        r = rospy.Rate(5.0)
        # rospy.loginfo("stop via direcion change...")
        twist = Twist()
        for i in range(5):      
          # twist.linear.x = -0.00001
          twist.angular.z = 0
          self.pub.publish(twist)
          r.sleep()
          # twist.linear.x = 0.00001
          # self.pub.publish(twist)
          # r.sleep()
          # twist.linear.x = 0.00000
          # self.pub.publish(twist)
          # r.sleep()
        rospy.loginfo("not moving?")

    def twist_heading(self, th):
        r = rospy.Rate(5.0)
        twist = Twist()
        if th < -1.57/8: 
          twist.angular.z = -1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
        elif th > 1.57/8: 
          twist.angular.z = 1.57/8    # 90 deg/ 8s * 8sec = 90 degrees
        else:
          twist.angular.z = th
        self.pub.publish(twist)
        rospy.loginfo("angular z %f", twist.angular.z)
        r.sleep()
        # r.sleep()
        # r.sleep()
        # r = rospy.Rate(5.0)

class SimpleNav(object):

    def odometryCb(self, msg):
        while self.latch_:
          rospy.sleep(1)
        self.latch_ = True
        if self.msg_cnt_ > 1:
          self.prev_msg_ = self.cur_msg_
        self.cur_msg_ = msg
        self.latch_ = False
        self.msg_cnt_ = self.msg_cnt_ + 1

    def lidarCB(self, msg):
        # number of inches to obstacle
        if 
        self.clear_path = 12.0
 
    def ptCloudCB(self, msg):
        # ensure that robot is clear by 12" in front / all sides
   
       

    def stop_rotate(self):
        tw = twist_moves()
        twist_again = True
        # ensure not moving
        prev_x = 100000000
        prev_y = 100000000
        while self.latch_ or self.msg_cnt_ < 2:
          rospy.sleep(1)
        cur_x = self.cur_msg_.pose.pose.position.x
        cur_y = self.cur_msg_.pose.pose.position.y
        cur_msg = self.msg_cnt_
        while prev_x!=cur_x or prev_y!=cur_y:
          if cur_msg>self.msg_cnt_-10:
            rospy.sleep(1)
            continue
          tw.twist_heading(0.0)
          rospy.sleep(1)
          prev_x = cur_x
          prev_y = cur_y
          cur_msg = self.msg_cnt_
          cur_x = self.cur_msg_.pose.pose.position.x
          cur_y = self.cur_msg_.pose.pose.position.y
          rospy.loginfo("try to stop: x %f y %f", cur_x, cur_y)


    def rotate_towards(self, des_x, des_y):
        rospy.loginfo("rotate_towards")
        tw = twist_moves()
        twist_again = True
        self.stop_rotate() # ensure not moving
        twist_again = True
        while twist_again:
          while self.latch_ or self.msg_cnt_ < 2:
            rospy.sleep(1)
          self.latch_ = True;
          # (roll, pitch, yaw) = tf.transformations.euler_from_quaternion([msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w])
          (roll, pitch, prev_th) = tf.transformations.euler_from_quaternion([self.prev_msg_.pose.pose.orientation.x,self.prev_msg_.pose.pose.orientation.y,self.prev_msg_.pose.pose.orientation.z,self.prev_msg_.pose.pose.orientation.w])
          (roll, pitch, cur_th) = tf.transformations.euler_from_quaternion([self.cur_msg_.pose.pose.orientation.x,self.cur_msg_.pose.pose.orientation.y,self.cur_msg_.pose.pose.orientation.z,self.cur_msg_.pose.pose.orientation.w])
          cur_x = self.cur_msg_.pose.pose.position.x
          cur_y = self.cur_msg_.pose.pose.position.y
          des_th = atan2((des_y-cur_y),(des_x-cur_x))
          # des_th = atan2((des_x-cur_x),(des_y-cur_y))

          # if self.prev_msg_ == self.cur_msg_ and cur_th == des_th:
          rospy.loginfo("x %f y %f th %f des_th %f dif %f", cur_x, cur_y, cur_th, des_th, des_th - cur_th)
          if abs(cur_th - des_th) < .06 and self.prev_th_ == cur_th and self.msg_cnt_ - cnt >= 10:
            self.latch_ = False
            twist_again = False
            rospy.loginfo("Rotation complete")
            continue
          if abs(cur_th - des_th) < .06 and self.prev_th_ == cur_th and cnt == 10000000000000000:
            cnt = self.msg_cnt_ 
            rospy.sleep(5)
          else:
            cnt = 10000000000000000
          self.latch_ = False
          self.prev_th_ = cur_th
          if abs(cur_th - des_th) < .06:
            tw.twist_heading(0.0)
          else:
            tw.twist_heading(des_th - cur_th)
        self.stop_rotate() # ensure not moving

    def __init__(self):
        # rospy.init_node('heading client', anonymous=True) #make node 
        rospy.Subscriber('odom',Odometry, self.odometryCb)
        self.latch_ = False
        self.msg_cnt_ = 0
        self.prev_th_ = 5000  # not within legal range
        
# Move base using navigation stack
class MoveBaseClient(object):

    def __init__(self):
        self.client = actionlib.SimpleActionClient("move_base", MoveBaseAction)
        rospy.loginfo("Waiting for move_base...")
        self.client.wait_for_server()
        rospy.loginfo("OK for move_base...")
        self.pub = rospy.Publisher('/base_controller/command', Twist, queue_size=30)
        # give our node/publisher a bit of time to connect
        rospy.loginfo("Waiting for base_controller...")
        rospy.sleep(1)

    def stop_twist(self):
        twist = Twist()
        rospy.loginfo("stop via direcion change...")
        for s in range(4):         # 10*5hz = 2sec
          twist.linear.x = -0.00001
          twist.angular.z = 0
          self.pub.publish(twist)
          rospy.sleep(1)
          twist.linear.x = 0.00001
          self.pub.publish(twist)
          rospy.sleep(1)
          twist.linear.x = 0.0
          self.pub.publish(twist)
          rospy.sleep(1)

    # def twist_towards(self, x, y)


    def goto(self, x, y, theta, frame="map"):
      compute_goal = True
      hc = HeadingClient()
      # hc.rotate_towards(x,y)
      while compute_goal:
        move_goal = MoveBaseGoal()
        move_goal.target_pose.pose.position.x = x
        move_goal.target_pose.pose.position.y = y
        move_goal.target_pose.pose.orientation.z = sin(theta/2.0)
        move_goal.target_pose.pose.orientation.w = cos(theta/2.0)
        move_goal.target_pose.header.frame_id = frame
        move_goal.target_pose.header.stamp = rospy.Time.now()

        # TODO wait for things to work
        # gid = self.client.send_goal(move_goal)
        self.client.send_goal(move_goal)
        rospy.loginfo("send goal for move_base: x %f, y %f, theta %f" %(x, y, theta))
        # self.client.wait_for_result()
        # self.client.wait_for_result(rospy.Duration(125.0))
        self.client.wait_for_result(rospy.Duration(30.0))

        if (self.client.get_state() != am.GoalStatus.SUCCEEDED):
          compute_goal = True
          self.client.cancel_goal()
          # tw.stop_twist()
          hc.rotate_towards(x,y)
          # tw.stop_twist()
          rospy.loginfo("recompute move_base...")
          # self.client.goto(x, y, theta, frame)
        else:
          compute_goal = False
          # tw.stop_twist()
      rospy.loginfo("move_base success...")

# Send a trajectory to controller
class TorsoClient(object):

    def __init__(self):
        self.client = actionlib.SimpleActionClient("torso_controller/follow_joint_trajectory",
                                                   FollowJointTrajectoryAction)
        rospy.loginfo("Waiting for torso_controller")
        self.client.wait_for_server()
        rospy.loginfo("Waiting complete for torso_controller")

    def move_to(self, position, duration=15.0):
        # trajectory = JointTrajectory()
        # trajectory.joint_names = ["arm_lift_joint",]
        # trajectory.points.append(JointTrajectoryPoint())
        # trajectory.points[0].positions = [position, ]
        # trajectory.points[0].velocities = [0.0,]
        # trajectory.points[0].accelerations = [0.0,]
        # trajectory.points[0].time_from_start = rospy.Duration(duration)
        # follow_goal = FollowJointTrajectoryGoal()
        # follow_goal.trajectory = trajectory
        torso_goal = FollowJointTrajectoryGoal()
        torso_point = JointTrajectoryPoint()
        torso_point.positions = [position,]
        torso_point.velocities = [0.0,]
        torso_point.accelerations = [0.0,]
        torso_point.time_from_start = rospy.Duration(duration)
        torso_goal.trajectory.points.append(torso_point)
        torso_goal.trajectory.header.stamp = rospy.Time.now()
        torso_goal.trajectory.joint_names = ["arm_lift_joint",]

        self.client.send_goal(torso_goal)
        rospy.loginfo("moveto goal")
        self.client.wait_for_result(rospy.Duration(duration))
        rospy.loginfo("moveto done")

    def tuck_arm(self, duration=15.0):
        torso_goal = FollowJointTrajectoryGoal()
        torso_point = JointTrajectoryPoint()
        torso_point.positions = [0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        torso_point.velocities = [0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        torso_point.accelerations = [0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        torso_point.time_from_start = rospy.Duration(duration)
        torso_goal.trajectory.points.append(torso_point)
        torso_goal.trajectory.header.stamp = rospy.Time.now()
        torso_goal.trajectory.joint_names = ["arm_lift_joint","arm_shoulder_pan_joint","arm_shoulder_lift_joint","arm_upperarm_roll_joint","arm_elbow_flex_joint","arm_wrist_flex_joint","arm_wrist_roll_joint"]

        self.client.send_goal(torso_goal)
        rospy.loginfo("moveto goal")
        self.client.wait_for_result(rospy.Duration(duration))
        rospy.loginfo("moveto done")


# Point the head using controller
class PointHeadClient(object):
    def __init__(self):
        self.client = actionlib.SimpleActionClient("head_controller/point_head", PointHeadAction)
        rospy.loginfo("Waiting for head_controller...")
        self.client.wait_for_server()
        rospy.loginfo("Waiting for head_controller complete...")
        self.pan_tilt_client = actionlib.SimpleActionClient(
                                     "head_controller/follow_joint_trajectory",
                                     FollowJointTrajectoryAction)
        rospy.loginfo("Waiting for pan-tilt head_controller...")
        self.pan_tilt_client.wait_for_server()
        rospy.loginfo("Waiting for pan-tilt head_controller complete...")


    def look_at(self, x, y, z, frame, duration=5.0):
        goal = PointHeadGoal()
        goal.target.header.stamp = rospy.Time.now()
        goal.target.header.frame_id = frame
        goal.target.point.x = x
        goal.target.point.y = y
        goal.target.point.z = z
        goal.min_duration = rospy.Duration(duration)
        self.client.send_goal(goal)
        rospy.loginfo("look_at goal %f %f" % (x, y))
        self.client.wait_for_result(rospy.Duration(5.0))
        rospy.loginfo("look_at done")
   
    def pan_tilt(self, pan, tilt):
        duration = 5
        trajectory = JointTrajectory()
        trajectory.joint_names = ["head_pan_joint", "head_tilt_joint"]
        trajectory.points.append(JointTrajectoryPoint())
        trajectory.points[0].positions = [pan, tilt]
        trajectory.points[0].velocities = [0.0, 0.0]
        trajectory.points[0].accelerations = [0.0, 0.0]
        trajectory.points[0].time_from_start = rospy.Duration(duration)
        follow_goal = FollowJointTrajectoryGoal()
        follow_goal.trajectory = trajectory
        self.pan_tilt_client.send_goal(follow_goal)
        rospy.loginfo("pan_tilt goal")
        self.pan_tilt_client.wait_for_result(rospy.Duration(5.0))
        rospy.loginfo("pan_tilt done")

        

    def verify_clear_path

   
    def move_next_to_table
    def rotate_to_cube
    def rotate_to_box

    def find_cube_on_table


    def find_box_on_table

    def follow_table_edge
    
    def drive_to_cube

    def drive_to_box

# Tools for grasping
class NavigateClient(object):
    def __init__(self):

    def scan_for_table
        # Move the base to be in front of the table
        # Demonstrates the use of the navigation stack
        # Orig:
        #   move_base.goto(2.250, 3.118, 0.0)
        best_tab = 0;
        best_x = 0;
        best_y = 0;
        # scan_for_table()
        for x in range(8):
          for y in range(8):
            self.head_action.look_at((8.0-(x/2.0)), (8.0-(y/2.0)), 0.0, "map")
            if (tab_val > best_tab)
              best_tab = tab_val
              best_x = 7.5 - x / 2.0
              best_y = 7.5 - y / 2.0

        self.head_action.look_at((8.0-(x/2.0)), (8.0-(y/2.0)), 0.0, "map")
        tab_val = self.grasping_client.lookForTable()
        self.head_action.look_at(self.tab.centroid.x, self.tab.controid.y, 0.0, "map")


# Tools for grasping
class GraspingClient(object):

    def __init__(self):
        self.scene = PlanningSceneInterface("base_link")
        self.pickplace = PickPlaceInterface("arm", "gripper", verbose=True)
        self.move_group = MoveGroupInterface("arm", "base_link")

        find_topic = "basic_grasping_perception/find_objects"
        rospy.loginfo("Waiting for %s..." % find_topic)
        self.find_client = actionlib.SimpleActionClient(find_topic, FindGraspableObjectsAction)
        self.find_client.wait_for_server(rospy.Duration(5.0))
        find_table_topic = "basic_grasping_perception/find_tables"
        rospy.loginfo("Waiting for %s..." % find_table_topic)
        self.find_table_client = actionlib.SimpleActionClient(find_table_topic, FindTablesAction)
        self.find_table_client.wait_for_server(rospy.Duration(5.0))
        rospy.loginfo("Waiting for %s complete..." % find_table_topic)

    def updateScene(self):
        # find objects
        goal = FindGraspableObjectsGoal()
        goal.plan_grasps = True
        self.find_client.send_goal(goal)
        self.find_client.wait_for_result(rospy.Duration(5.0))
        find_result = self.find_client.get_result()

        # remove previous objects
        for name in self.scene.getKnownCollisionObjects():
            self.scene.removeCollisionObject(name, False)
        for name in self.scene.getKnownAttachedObjects():
            self.scene.removeAttachedObject(name, False)
        rospy.loginfo("Waiting for sync")
        self.scene.waitForSync()

        # insert objects to scene
        idx = -1
        for obj in find_result.objects:
            idx += 1
            obj.object.name = "object%d"%idx
            self.scene.addSolidPrimitive(obj.object.name,
                                         obj.object.primitives[0],
                                         obj.object.primitive_poses[0],
                                         wait = False)
        rospy.loginfo("number of objects found: %d", idx)

        for obj in find_result.support_surfaces:
            # extend surface to floor, and make wider since we have narrow field of view
            height = obj.primitive_poses[0].position.z
            obj.primitives[0].dimensions = [obj.primitives[0].dimensions[0],
                                            1.5,  # wider
                                            obj.primitives[0].dimensions[2] + height]
            obj.primitive_poses[0].position.z += -height/2.0

            # add to scene
            self.scene.addSolidPrimitive(obj.name,
                                         obj.primitives[0],
                                         obj.primitive_poses[0],
                                         wait = False)

        self.scene.waitForSync()

        # store for grasping
        self.objects = find_result.objects

    def getGraspableCube(self):
        graspable = None
        for obj in self.objects:
            # need grasps
            if len(obj.grasps) < 1:
                rospy.loginfo("no object.")
                continue
            # check size
	    rospy.loginfo("object dimension: %f", obj.object.primitives[0].dimensions[0])
            if obj.object.primitives[0].dimensions[0] < 0.05 or \
               obj.object.primitives[0].dimensions[0] > 0.07 or \
               obj.object.primitives[0].dimensions[0] < 0.05 or \
               obj.object.primitives[0].dimensions[0] > 0.07 or \
               obj.object.primitives[0].dimensions[0] < 0.05 or \
               obj.object.primitives[0].dimensions[0] > 0.07:
                continue
            # has to be on table
            if obj.object.primitive_poses[0].position.z < 0.5:
	        rospy.loginfo("object z dimension: %f", obj.object.primitive_poses[0].position.z)
                continue
            return obj.object, obj.grasps
        # nothing detected
	rospy.loginfo("nothing detected")
        return None, None

    def lookForTable(self):
        # find objects
        goal = FindTablesGoal()
        self.find_table_client.send_goal(goal)
        self.find_table_client.wait_for_result(rospy.Duration(5.0))
        find_result = self.find_table_client.get_result()

        # remove previous objects
        # for name in self.scene.getKnownCollisionObjects():
            # self.scene.removeCollisionObject(name, False)
        # for name in self.scene.getKnownAttachedObjects():
            # self.scene.removeAttachedObject(name, False)
        rospy.loginfo("Waiting for sync")
        self.scene.waitForSync()
        # insert objects to scene
        idx = -1
        if find_result == 0:
            rospy.loginfo("No tables found")
        else:
            rospy.loginfo("found table %f", find_result.detectedTables)
            self.table = find_result.detectedTables

    def getTable(self):
        # self.table 
	rospy.loginfo("getTable")
        return None, None

    def getSupportSurface(self, name):
        for surface in self.support_surfaces:
            if surface.name == name:
                return surface
        return None

    def getPlaceLocation(self):
        pass

    def pick(self, block, grasps):
        success, pick_result = self.pickplace.pick_with_retry(block.name,
                                                              grasps,
                                                              support_name=block.support_surface,
                                                              scene=self.scene)
        self.pick_result = pick_result
        return success

    def place(self, block, pose_stamped):
        places = list()
        l = PlaceLocation()
        l.place_pose.pose = pose_stamped.pose
        l.place_pose.header.frame_id = pose_stamped.header.frame_id

        # copy the posture, approach and retreat from the grasp used
        l.post_place_posture = self.pick_result.grasp.pre_grasp_posture
        l.pre_place_approach = self.pick_result.grasp.pre_grasp_approach
        l.post_place_retreat = self.pick_result.grasp.post_grasp_retreat
        places.append(copy.deepcopy(l))
        # create another several places, rotate each by 90 degrees in yaw direction
        l.place_pose.pose = rotate_pose_msg_by_euler_angles(l.place_pose.pose, 0, 0, 1.57)
        places.append(copy.deepcopy(l))
        l.place_pose.pose = rotate_pose_msg_by_euler_angles(l.place_pose.pose, 0, 0, 1.57)
        places.append(copy.deepcopy(l))
        l.place_pose.pose = rotate_pose_msg_by_euler_angles(l.place_pose.pose, 0, 0, 1.57)
        places.append(copy.deepcopy(l))

        success, place_result = self.pickplace.place_with_retry(block.name,
                                                                places,
                                                                scene=self.scene)
        return success

    def tuck(self):
        joints = ["arm_shoulder_pan_joint", "arm_shoulder_lift_joint", "arm_upperarm_roll_joint",
                  "arm_elbow_flex_joint", "arm_wrist_flex_joint", "arm_wrist_roll_joint"]
        # pose = [1.32, 1.40, -0.2, 1.72, 1.66, 0.0]
        pose = [0.00, 0.00, 0.00, 0.00, 0.00, 0.0]
        while not rospy.is_shutdown():
            result = self.move_group.moveToJointPosition(joints, pose, 0.02)
            if result.error_code.val == MoveItErrorCodes.SUCCESS:
                return

if __name__ == "__main__":
    # Create a node
    rospy.init_node("demo")

    # Make sure sim time is working
    while not rospy.Time.now():
        pass

    # Setup clients
    move_base_ = MoveBaseClient()
    torso_action_ = TorsoClient()
    head_action_ = PointHeadClient()
    grasping_client_ = GraspingClient()
    tw_ = twist_moves()

#    for x in range(4):
#      for y in range(4):
#        head_action.look_at((4.0-(x/2.0)), (4.0-(y/2.0)), 0.0, "map")
#        grasping_client.updateScene()
#        cube, grasps = grasping_client.getGraspableCube()
#    head_action.pan_tilt(0.0, 0.0)

    torso_action_.tuck_arm()
    # rospy.loginfo("lowering torso 0...")
    # torso_action.move_to(-0.591)
    #rospy.loginfo("Raising torso 0...")
    #torso_action.move_to(0.0)
    # rospy.loginfo("pan_tilt 0 0")
    # head_action.pan_tilt(0.0, 0.0)


    # tw.rotate_once()

    # Move the base to be in front of the table
    # Demonstrates the use of the navigation stack
    # Orig:
    #   move_base.goto(2.250, 3.118, 0.0)
    best_tab = 0;
    best_x = 0;
    best_y = 0;
    # scan_for_table()
    for x in range(8):
      for y in range(8):
        head_action.look_at((8.0-(x/2.0)), (8.0-(y/2.0)), 0.0, "map")
        if (tab_val > best_tab) 
          best_tab = tab_val
          best_x = 7.5 - x / 2.0
          best_y = 7.5 - y / 2.0
    
    head_action.look_at((8.0-(x/2.0)), (8.0-(y/2.0)), 0.0, "map")
    tab_val = grasping_client.lookForTable()
    head_action.look_at(self.tab.centroid.x, self.tab.controid.y, 0.0, "map")

    head_action.verify_clear_path()
    tw.nav_to_table_no_slam()

    while (head_action.find_cube_on_table()
      tw.goto_cube()
      # follow_table_edge
      #   head_action.verify_clear_path()
      # tw.rotate_to_cube
      tw.move_next_to_table
      grasping_client.pick_up_cube()
      head_action.verify_cube_in_grasp()
      find_box_on_table
      follow_table_edge
      tw.move_next_to_table
      drop_cube_in_box()





    def rotate_to_box()

    def find_cube_on_table


    def find_box_on_table


    def drive_to_cube

    def drive_to_box



    # move_base.goto(2.700, 3.318, 0.0)

    # Raise the torso using just a controller
    rospy.loginfo("Raising torso...")
    torso_action.move_to(-0.1)

    # Point the head at the cube we want to pick
    # head_action.look_at(3.75, 3.18, 0.0, "map")
    # <pose>3.7 2.85 0.83 0 0 0</pose>
    # rospy.loginfo("look_at 3.75 3.18")
    # head_action.look_at(3.75, 3.18, 0.0, "map")
    # rospy.loginfo("pan_tilt 0 1.57")
    # head_action.pan_tilt(0.0, 1.57)


    # Get block to pick
    while not rospy.is_shutdown():
        rospy.loginfo("Picking object...")
        grasping_client.updateScene()
        cube, grasps = grasping_client.getGraspableCube()
        if cube == None:
            rospy.logwarn("Perception failed.")
            continue

        # Pick the block
        if grasping_client.pick(cube, grasps):
            break
        rospy.logwarn("Grasping failed.")

    # Tuck the arm
    grasping_client.tuck()

    # Lower torso
    rospy.loginfo("Lowering torso...")
    # torso_action.move_to([0.0, ])
    torso_action.move_to([-0.591, ])

    # Move to second table
    # rospy.loginfo("Moving to second table...")
    # move_base.goto(-3.53, 3.75, 1.57)

    # Raise the torso using just a controller
    rospy.loginfo("Raising torso...")
    # torso_action.move_to([0.4, ])
    torso_action.move_to([-0.1, ])

    # rospy.loginfo("head 1.57 0 -1.57 ")
    # head_action.look_at(1.57, 0.0, 0.0, "map")
    # head_action.look_at(1.57, 0.0, -1.57, "map")

    # Place the block
    while not rospy.is_shutdown():
        rospy.loginfo("Placing object...")
        pose = PoseStamped()
        pose.pose = cube.primitive_poses[0]
        pose.pose.position.z += 0.05
        pose.header.frame_id = cube.header.frame_id
        if grasping_client.place(cube, pose):
            break
        rospy.logwarn("Placing failed.")

    # Tuck the arm, lower the torso
    grasping_client.tuck()
    # torso_action.move_to([0.0, ])
    torso_action.move_to([-0.591, ])
